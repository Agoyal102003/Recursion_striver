// Approach 1 -> Recursive

void findCombinations(int index, vector<int>& candidates, int target, 
    vector<vector<int>>& result, vector<int>& current)
    {
        if(index==candidates.size())
        {
            if(target==0)
            {
                result.push_back(current);
            }
            return;
        }
        //pick up the element
        if(candidates[index]<=target)
        {
            current.push_back(candidates[index]);
            findCombinations(index, candidates, target-candidates[index], result, current);
            current.pop_back();
        }
        findCombinations(index+1, candidates, target, result, current);
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        vector<int> current;
        findCombinations(0, candidates, target, result, current);
        return result;
    }

//Approach 2 -> Recursive

void findCombinations(vector<int>& candidates, int target, vector<vector<int>>& result, vector<int>& current, int index) {
    // Base case: If target becomes 0, we found a valid combination
    if (target == 0) {
        result.push_back(current);
        return;
    }

    // Explore all candidates starting from the current index
    for (int i = index; i < candidates.size(); i++) {
        // If the candidate exceeds the remaining target, no need to proceed further
        if (candidates[i] > target) {
            continue;
        }

        // Include the candidate and make a recursive call with the reduced target
        current.push_back(candidates[i]);

        // Since we can reuse the same element, we pass the same index
        findCombinations(candidates, target - candidates[i], result, current, i);

        // Backtrack: Remove the last element to explore other possibilities
        current.pop_back();
    }
}

vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    vector<vector<int>> result;
    vector<int> current;
    
    // Start the recursion with index 0
    findCombinations(candidates, target, result, current, 0);
    
    return result;
}
